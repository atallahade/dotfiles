set nocompatible          " Vim settings instead of Vi
filetype off              " required
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'w0rp/ale'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'dracula/vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'rust-lang/rust.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'timonv/vim-cargo'
Plugin 'tpope/vim-fugitive'
Plugin 'cespare/vim-toml'
Plugin 'lepture/vim-velocity'
Plugin 'Valloric/YouCompleteMe'
Plugin 'dag/vim-fish'
call vundle#end()         " required

noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>

syntax on                 " Syntax highlight
filetype plugin indent on " Detect file type
set t_Co=256              " Enable 256 color mode
set path+=**              " Add subfolders to path
set showcmd               " Show incomplete commands
set showmode              " Show current mode
set autoread              " Reload files changed outside vim

" Allow backspace in insert mode
set backspace=indent,eol,start

" Enable bottom menu
set wildmenu
set wildmode=longest,full

" Better search
set hlsearch
set incsearch
set ignorecase
set smartcase

" Reload Vim config with F8
nmap <F8> :source $HOME/.vimrc<ENTER>

" Print lines
set number
set ruler

" Tabs
set expandtab             " Spaces, not tab
set tabstop=2             " 2 spaces per indentation
set shiftwidth=2
set textwidth=0
set wrapmargin=0
set softtabstop=2

" Enable clipboard
set clipboard=unnamedplus

"Auto indent pasted text
nnoremap p p=`]<C-o>
nnoremap P P=`]<C-o>

" Auto close brace
inoremap {<CR> {<CR>}<ESC>O

" 4 lines offset at the bottom
set scrolloff=4

set smartindent
" Stop putting # to first column
set cindent
set cinkeys-=0#
set indentkeys-=0#

" https://items.sjbach.com/319/configuring-vim-right
set hidden                " Allow Vim to manage multiple buffers
nnoremap ' `
nnoremap ` '
set history=1000          " Longer history

" Custom commands
command! Automake :autocmd BufWritePost <buffer> make

" Column limit at 80 characters
nmap <F12> :call ColumnLimitToggle()<cr>

function! ColumnLimitToggle()
  if &colorcolumn
    setlocal colorcolumn=0
  else
    setlocal colorcolumn=80
  endif
endfunction

" Disable ex mode key bindings
map q: <Nop>
nnoremap Q <nop>

" Enable spellchecking
let g:spell_enable = 0
nmap <S-F12> :call SpellcheckToggle()<cr>

function! SpellcheckToggle()
  if g:spell_enable
    setlocal nospell
  else
    setlocal spell spelllang=en_us
  endif
  let g:spell_enable = !g:spell_enable
endfunction

" Rust
"let g:ycm_rust_src_path="~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src"
let g:syntastic_rust_checkers = ['rustc']
let g:syntastic_rust_rustc_exe = 'cargo check'
let g:syntastic_rust_rustc_fname = ''
"let g:syntastic_rust_rustc_args = '--'
"let g:syntastic_debug = 1

" YouCompleteMe
set completeopt-=preview

" Syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
highlight SyntasticWarning guibg=Red

" ALE
let g:airline#extensions#ale#enabled = 1
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" CTRL-t to toggle tree view with CTRL-t
nmap <silent> <C-t>      :NERDTreeToggle<CR>
" Set F2 to put the cursor to the nerdtree
nmap <silent> <F2>       :NERDTreeFind<CR>
" CTRL + Arrow to manipulate tabs
nnoremap <C-LEFT>        :tabprevious<CR>
nnoremap <C-RIGHT>       :tabnext<CR>
nnoremap <C-DOWN>        :+tabmove<CR>
nnoremap <C-UP>          :-tabmove<CR>
nnoremap <C-UP>          :-tabmove<CR>
" Disable CTRL + ALT + PageUp/PageDown to move tabs
map <C-A-PageUp>         <nop>
map <C-A-PageDown>       <nop>
imap <C-A-PageUp>        <nop>
imap <C-A-PageDown>      <nop>

" airline
let g:airline_powerline_fonts = 1     "Powerline fonts
set laststatus=2                      "Show status bar at startup
set noshowmode                        "Hide default mode
set ttimeoutlen=10                    "Fix slow mode update

" Color scheme
"let g:dracula_colorterm = 0
"color dracula
"hi SpellCap term=reverse cterm=bold ctermfg=231 ctermbg=24
"hi Pmenu term=reverse ctermbg=234 guibg=#44475a
"hi ErrorMsg term=standout ctermfg=16 ctermbg=203

" No highlight
nmap <Bslash><Space> :noh<CR>

" CTRLP
let g:ctrlp_working_path_mode = 0 " Search only from the current directory

" UnMinify
command! UnMinify call UnMinify()
function! UnMinify()
  %s/{\ze[^\r\n]/{\r/g
  %s/){/) {/g
  %s/};\?\ze[^\r\n]/\0\r/g
  %s/;\ze[^\r\n]/;\r/g
  %s/[^\s]\zs[=&|]\+\ze[^\s]/ \0 /g
  normal ggVG=
endfunction

" Escape/unescape & < > HTML entities in range (default current line).
function! HtmlEntities(line1, line2, action)
  let search = @/
  let range = 'silent ' . a:line1 . ',' . a:line2
  if a:action == 0  " must convert &amp; last
    execute range . 'sno/&lt;/</eg'
    execute range . 'sno/&gt;/>/eg'
    execute range . 'sno/&amp;/&/eg'
  else              " must convert & first
    execute range . 'sno/&/&amp;/eg'
    execute range . 'sno/</&lt;/eg'
    execute range . 'sno/>/&gt;/eg'
  endif
  nohl
  let @/ = search
endfunction
command! -range -nargs=1 Entities call HtmlEntities(<line1>, <line2>, <args>)
noremap <silent> <Leader>h :Entities 0<CR>
noremap <silent> <Leader>H :Entities 1<CR>

set shell=bash
